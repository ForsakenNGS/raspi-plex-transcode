#!/usr/bin/env python

import re
import yaml
import os
import sys
import subprocess

def load_configuration():
  #print("Loading configuration...")
  config = None
  configFile = os.path.dirname(os.path.realpath(__file__))+"/ffmpeg-transcode.yaml"
  if not os.path.isfile(configFile):
    # Download default config file via wget
    subprocess.run(["wget", "-q", "https://github.com/ForsakenNGS/raspi-plex-transcode/raw/main/ffmpeg-transcode.yaml", "-O", configFile]);
  # Open and parse configuration file
  with open(configFile, "r") as stream:
    try:
      config = yaml.safe_load(stream)
    except yaml.YAMLError as e:
      print("Error loading config: "+configFile)
      print(e)
  return config

def parse_argument_value(value):
  if value is None:
    return None
  else:
    return " ".join(value)

def parse_arguments():
  #print("Parsing commandline arguments...")
  arguments = {
    "input": {},
    "output": {}
  }
  argSection = "input"
  argName = None
  argValue = None
  for arg in sys.argv[1:]:
    if arg.startswith("-"):
      if argName is not None:
        arguments[argSection][argName] = parse_argument_value(argValue)
        if argName == "-i":
          argSection = "output"
      argName = arg
      argValue = None
    else:
      if argValue is None:
        argValue = []
      argValue.append(arg)
  if argName is not None:
    arguments[argSection][argName] = parse_argument_value(argValue)
  return arguments

def profile_condition_arg(condition, arguments, currentProfile, currentPriority):
  # Check priority
  conditionPriority = 0
  if "priority" in condition:
    conditionPriority = condition["priority"]
  if conditionPriority <= currentPriority:
    return currentProfile, currentPriority
  # Get argument value
  if not condition["argName"] in arguments[condition["argSection"]]:
    if condition["type"] == "missing":
      # Matches if argument is missing
      return condition["profile"], conditionPriority
    else:
      # Condition type requires argument to be present
      return currentProfile, currentPriority
  value = arguments[condition["argSection"]][condition["argName"]]
  # Check condition
  if condition["type"] == "present":
    # Matches as soon as the argument is present
    return condition["profile"], conditionPriority
  elif condition["type"] == "exact":
    # Exact value match
    if condition["value"] == value:
      return condition["profile"], conditionPriority
  elif condition["type"] == "regex":
    # Regular expression match
    regexFlags = 0
    if ("ignorecase" in condition) and condition["ignorecase"]:
      regexFlags += re.IGNORECASE
    regexPattern = re.compile(condition["value"], regexFlags)
    if regexPattern.match(value):
      return condition["profile"], conditionPriority
  return currentProfile, currentPriority

def profile_select(config, arguments):
  #print("Evaluating target profile...")
  profileName = None
  profilePriority = -1
  if not "profile_select" in config:
    return None
  if "default" in config["profile_select"]:
    profileName = config["profile_select"]["default"]
  if "by_argument" in config["profile_select"]:
    for condition in config["profile_select"]["by_argument"]:
      profileName, profilePriority = profile_condition_arg(condition, arguments, profileName, profilePriority)
  if profileName in config["profiles"]:
    return config["profiles"][profileName]
  else:
    return None

def profile_parameters(profile):
  argumentRepl = {
    "input": {},
    "output": {}
  }
  if profile is not None:
    # Apply profile overrides
    if profile["input"] is not None:
      for argName in profile["input"]:
        argumentRepl["input"][argName] = profile["input"][argName]
    if profile["output"] is not None:
      for argName in profile["output"]:
        argumentRepl["output"][argName] = profile["output"][argName]
  # Build parameter list
  parameters = []
  argSection = "input"
  argName = None
  for arg in sys.argv[1:]:
    # Apply replacement if present
    if argName is not None:
      if argName in argumentRepl[argSection]:
        arg = argumentRepl[argSection][argName]
        del argumentRepl[argSection][argName]
    # Check for end of input arguments
    if argName == "-i":
      # Add parameters that were not present in the inital call from plex
      for argNameNew in argumentRepl[argSection]:
        parameters.append(argNameNew)
        if argumentRepl[argSection][argNameNew] is not None:
          parameters.append(argumentRepl[argSection][argNameNew])
    # Append to parameter list
    parameters.append(arg)
    # Update state
    if arg.startswith("-"):
      argName = arg
    else:
      if argName == "-i":
        argSection = "output"
      argName = None
  # Add parameters that were not present in the inital call from plex
  for argNameNew in argumentRepl[argSection]:
    parameters.append(argNameNew)
    if argumentRepl[argSection][argNameNew] is not None:
      parameters.append(argumentRepl[argSection][argNameNew])
  return parameters


config = load_configuration()
if config is None:
  print("Failed to load configuration! Exiting.")
  sys.exit(1)
arguments = parse_arguments()
profile = profile_select(config, arguments)
parameters = profile_parameters(profile)
executable = config["executable"]

parameters.insert(0, executable)
#from shlex import join
#print(join(parameters))
result = subprocess.run(parameters)
sys.exit(result.returncode)
